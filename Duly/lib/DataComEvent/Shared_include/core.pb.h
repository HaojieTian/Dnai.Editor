// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef PROTOBUF_core_2eproto__INCLUDED
#define PROTOBUF_core_2eproto__INCLUDED

#include <string>

#include "google/protobuf/stubs/common.h"

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_table_driven.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)
class Declare;
class DeclareDefaultTypeInternal;
extern DeclareDefaultTypeInternal _Declare_default_instance_;
class Default;
class DefaultDefaultTypeInternal;
extern DefaultDefaultTypeInternal _Default_default_instance_;
class Remove;
class RemoveDefaultTypeInternal;
extern RemoveDefaultTypeInternal _Remove_default_instance_;

namespace protobuf_core_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_core_2eproto

enum ENTITY {
  CONTEXT = 0,
  VARIABLE = 1,
  FUNCTION = 2,
  DATA_TYPE = 3,
  ENUM_TYPE = 4,
  OBJECT_TYPE = 5,
  LIST_TYPE = 6,
  ENTITY_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENTITY_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENTITY_IsValid(int value);
const ENTITY ENTITY_MIN = CONTEXT;
const ENTITY ENTITY_MAX = LIST_TYPE;
const int ENTITY_ARRAYSIZE = ENTITY_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENTITY_descriptor();
inline const ::std::string& ENTITY_Name(ENTITY value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENTITY_descriptor(), value);
}
inline bool ENTITY_Parse(
    const ::std::string& name, ENTITY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENTITY>(
    ENTITY_descriptor(), name, value);
}
enum VISIBILITY {
  PRIVATE = 0,
  PUBLIC = 1,
  VISIBILITY_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VISIBILITY_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VISIBILITY_IsValid(int value);
const VISIBILITY VISIBILITY_MIN = PRIVATE;
const VISIBILITY VISIBILITY_MAX = PUBLIC;
const int VISIBILITY_ARRAYSIZE = VISIBILITY_MAX + 1;

const ::google::protobuf::EnumDescriptor* VISIBILITY_descriptor();
inline const ::std::string& VISIBILITY_Name(VISIBILITY value) {
  return ::google::protobuf::internal::NameOfEnum(
    VISIBILITY_descriptor(), value);
}
inline bool VISIBILITY_Parse(
    const ::std::string& name, VISIBILITY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VISIBILITY>(
    VISIBILITY_descriptor(), name, value);
}
// ===================================================================

class Declare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Declare) */ {
 public:
  Declare();
  virtual ~Declare();

  Declare(const Declare& from);

  inline Declare& operator=(const Declare& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Declare& default_instance();

  static inline const Declare* internal_default_instance() {
    return reinterpret_cast<const Declare*>(
               &_Declare_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Declare* other);

  // implements Message ----------------------------------------------

  inline Declare* New() const PROTOBUF_FINAL { return New(NULL); }

  Declare* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Declare& from);
  void MergeFrom(const Declare& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Declare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ENTITY EntityType = 1;
  void clear_entitytype();
  static const int kEntityTypeFieldNumber = 1;
  ::ENTITY entitytype() const;
  void set_entitytype(::ENTITY value);

  // uint32 ContainerID = 2;
  void clear_containerid();
  static const int kContainerIDFieldNumber = 2;
  ::google::protobuf::uint32 containerid() const;
  void set_containerid(::google::protobuf::uint32 value);

  // .VISIBILITY Visibility = 4;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 4;
  ::VISIBILITY visibility() const;
  void set_visibility(::VISIBILITY value);

  // @@protoc_insertion_point(class_scope:Declare)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int entitytype_;
  ::google::protobuf::uint32 containerid_;
  int visibility_;
  mutable int _cached_size_;
  friend struct protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Default : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Default) */ {
 public:
  Default();
  virtual ~Default();

  Default(const Default& from);

  inline Default& operator=(const Default& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Default& default_instance();

  static inline const Default* internal_default_instance() {
    return reinterpret_cast<const Default*>(
               &_Default_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Default* other);

  // implements Message ----------------------------------------------

  inline Default* New() const PROTOBUF_FINAL { return New(NULL); }

  Default* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Default& from);
  void MergeFrom(const Default& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Default* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Declare Declare = 1;
  bool has_declare() const;
  void clear_declare();
  static const int kDeclareFieldNumber = 1;
  const ::Declare& declare() const;
  ::Declare* mutable_declare();
  ::Declare* release_declare();
  void set_allocated_declare(::Declare* declare);

  // .Remove Remove = 2;
  bool has_remove() const;
  void clear_remove();
  static const int kRemoveFieldNumber = 2;
  const ::Remove& remove() const;
  ::Remove* mutable_remove();
  ::Remove* release_remove();
  void set_allocated_remove(::Remove* remove);

  // @@protoc_insertion_point(class_scope:Default)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Declare* declare_;
  ::Remove* remove_;
  mutable int _cached_size_;
  friend struct protobuf_core_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Remove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Remove) */ {
 public:
  Remove();
  virtual ~Remove();

  Remove(const Remove& from);

  inline Remove& operator=(const Remove& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Remove& default_instance();

  static inline const Remove* internal_default_instance() {
    return reinterpret_cast<const Remove*>(
               &_Remove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Remove* other);

  // implements Message ----------------------------------------------

  inline Remove* New() const PROTOBUF_FINAL { return New(NULL); }

  Remove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Remove& from);
  void MergeFrom(const Remove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Remove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ENTITY EntityType = 1;
  void clear_entitytype();
  static const int kEntityTypeFieldNumber = 1;
  ::ENTITY entitytype() const;
  void set_entitytype(::ENTITY value);

  // uint32 ContainerID = 2;
  void clear_containerid();
  static const int kContainerIDFieldNumber = 2;
  ::google::protobuf::uint32 containerid() const;
  void set_containerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Remove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int entitytype_;
  ::google::protobuf::uint32 containerid_;
  mutable int _cached_size_;
  friend struct protobuf_core_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Declare

// .ENTITY EntityType = 1;
inline void Declare::clear_entitytype() {
  entitytype_ = 0;
}
inline ::ENTITY Declare::entitytype() const {
  // @@protoc_insertion_point(field_get:Declare.EntityType)
  return static_cast< ::ENTITY >(entitytype_);
}
inline void Declare::set_entitytype(::ENTITY value) {
  
  entitytype_ = value;
  // @@protoc_insertion_point(field_set:Declare.EntityType)
}

// uint32 ContainerID = 2;
inline void Declare::clear_containerid() {
  containerid_ = 0u;
}
inline ::google::protobuf::uint32 Declare::containerid() const {
  // @@protoc_insertion_point(field_get:Declare.ContainerID)
  return containerid_;
}
inline void Declare::set_containerid(::google::protobuf::uint32 value) {
  
  containerid_ = value;
  // @@protoc_insertion_point(field_set:Declare.ContainerID)
}

// string Name = 3;
inline void Declare::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Declare::name() const {
  // @@protoc_insertion_point(field_get:Declare.Name)
  return name_.GetNoArena();
}
inline void Declare::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Declare.Name)
}
#if LANG_CXX11
inline void Declare::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Declare.Name)
}
#endif
inline void Declare::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Declare.Name)
}
inline void Declare::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Declare.Name)
}
inline ::std::string* Declare::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Declare.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Declare::release_name() {
  // @@protoc_insertion_point(field_release:Declare.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Declare::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Declare.Name)
}

// .VISIBILITY Visibility = 4;
inline void Declare::clear_visibility() {
  visibility_ = 0;
}
inline ::VISIBILITY Declare::visibility() const {
  // @@protoc_insertion_point(field_get:Declare.Visibility)
  return static_cast< ::VISIBILITY >(visibility_);
}
inline void Declare::set_visibility(::VISIBILITY value) {
  
  visibility_ = value;
  // @@protoc_insertion_point(field_set:Declare.Visibility)
}

// -------------------------------------------------------------------

// Default

// .Declare Declare = 1;
inline bool Default::has_declare() const {
  return this != internal_default_instance() && declare_ != NULL;
}
inline void Default::clear_declare() {
  if (GetArenaNoVirtual() == NULL && declare_ != NULL) delete declare_;
  declare_ = NULL;
}
inline const ::Declare& Default::declare() const {
  // @@protoc_insertion_point(field_get:Default.Declare)
  return declare_ != NULL ? *declare_
                         : *::Declare::internal_default_instance();
}
inline ::Declare* Default::mutable_declare() {
  
  if (declare_ == NULL) {
    declare_ = new ::Declare;
  }
  // @@protoc_insertion_point(field_mutable:Default.Declare)
  return declare_;
}
inline ::Declare* Default::release_declare() {
  // @@protoc_insertion_point(field_release:Default.Declare)
  
  ::Declare* temp = declare_;
  declare_ = NULL;
  return temp;
}
inline void Default::set_allocated_declare(::Declare* declare) {
  delete declare_;
  declare_ = declare;
  if (declare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Default.Declare)
}

// .Remove Remove = 2;
inline bool Default::has_remove() const {
  return this != internal_default_instance() && remove_ != NULL;
}
inline void Default::clear_remove() {
  if (GetArenaNoVirtual() == NULL && remove_ != NULL) delete remove_;
  remove_ = NULL;
}
inline const ::Remove& Default::remove() const {
  // @@protoc_insertion_point(field_get:Default.Remove)
  return remove_ != NULL ? *remove_
                         : *::Remove::internal_default_instance();
}
inline ::Remove* Default::mutable_remove() {
  
  if (remove_ == NULL) {
    remove_ = new ::Remove;
  }
  // @@protoc_insertion_point(field_mutable:Default.Remove)
  return remove_;
}
inline ::Remove* Default::release_remove() {
  // @@protoc_insertion_point(field_release:Default.Remove)
  
  ::Remove* temp = remove_;
  remove_ = NULL;
  return temp;
}
inline void Default::set_allocated_remove(::Remove* remove) {
  delete remove_;
  remove_ = remove;
  if (remove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Default.Remove)
}

// -------------------------------------------------------------------

// Remove

// .ENTITY EntityType = 1;
inline void Remove::clear_entitytype() {
  entitytype_ = 0;
}
inline ::ENTITY Remove::entitytype() const {
  // @@protoc_insertion_point(field_get:Remove.EntityType)
  return static_cast< ::ENTITY >(entitytype_);
}
inline void Remove::set_entitytype(::ENTITY value) {
  
  entitytype_ = value;
  // @@protoc_insertion_point(field_set:Remove.EntityType)
}

// uint32 ContainerID = 2;
inline void Remove::clear_containerid() {
  containerid_ = 0u;
}
inline ::google::protobuf::uint32 Remove::containerid() const {
  // @@protoc_insertion_point(field_get:Remove.ContainerID)
  return containerid_;
}
inline void Remove::set_containerid(::google::protobuf::uint32 value) {
  
  containerid_ = value;
  // @@protoc_insertion_point(field_set:Remove.ContainerID)
}

// string Name = 3;
inline void Remove::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Remove::name() const {
  // @@protoc_insertion_point(field_get:Remove.Name)
  return name_.GetNoArena();
}
inline void Remove::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Remove.Name)
}
#if LANG_CXX11
inline void Remove::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Remove.Name)
}
#endif
inline void Remove::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Remove.Name)
}
inline void Remove::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Remove.Name)
}
inline ::std::string* Remove::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Remove.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Remove::release_name() {
  // @@protoc_insertion_point(field_release:Remove.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Remove::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Remove.Name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ENTITY> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ENTITY>() {
  return ::ENTITY_descriptor();
}
template <> struct is_proto_enum< ::VISIBILITY> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VISIBILITY>() {
  return ::VISIBILITY_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_core_2eproto__INCLUDED
